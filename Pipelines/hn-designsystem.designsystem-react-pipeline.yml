resources:
  repositories:
    - repository: templates #internt navn på repo, brukes i referanser
      type: git #type repo (les mer i dokumentasjon)
      name: HN-AzureDevopsPipelines #Navn på repo som inneholder templates

trigger:
  branches:
    include:
      - master
      - feature/*

pool:
  name: Helsenorge_LinuxScaleSetAgents

variables:
  - name: node_version
    value: 16.x
  - name: project_name
    value: Designsystem.Packages.Designsystem.CI
  - name: working_directory
    value: .
  - name: sonarqube_endpoint
    value: "https://sonarqube.int-hn.nhn.no"
  - name: Github.Username
    value: "larskrj"

stages:
  # stage build, test and analyze
  - stage:
    displayName: Build, Test and Analyze
    condition: succeededOrFailed() #Vent på de foregående stegene, men kjør selv om de feiler
    jobs:
      - job:
        displayName: Build, Test and Analyze
        steps:
          # Prepare Sonarqube
          - task: SonarQubePrepare@4
            displayName: Sonarqube Prepare
            inputs:
              SonarQube: $(sonarqube_endpoint)
              scannerMode: "CLI"
              cliProjectKey: $(project_name)
              cliProjectName: $(project_name)
              configMode: manual

          # Set node version
          - task: UseNode@1
            displayName: "Use Node version"
            inputs:
              version: $(node_version)

          # npm tasks
          # autenticate
          - task: npmAuthenticate@0
            displayName: "npm Authenticate .npmrc"
            inputs:
              workingFile: $(working_directory)/.npmrc

          - task: Npm@1
            displayName: "npm i (install lerna)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: ci

          - task: Npm@1
            displayName: "npm bootstrap (ci)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run bootstrap:ci"

          - task: Npm@1
            displayName: prettier
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run format:ci"
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: test
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run test"

          - task: Npm@1
            displayName: build
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run build"

          - task: Npm@1
            displayName: "build (for npmjs publishing only)"
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: "run copy:libnpmjs"
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'),  eq(variables['Build.SourceBranch'], 'refs/heads/master'))

          # Run Code Analysis task
          - task: SonarQubeAnalyze@4
            displayName: Sonarqube Analyze

          # Test results
          - task: PublishTestResults@2
            displayName: "Publish Test Results $(project_directory)/test-report.xml"
            inputs:
              testResultsFiles: "$(project_directory)/test-report.xml"
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage from $(Build.SourcesDirectory)\$(project_directory)\coverage\cobertura-coverage.xml'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)\$(project_directory)\coverage\cobertura-coverage.xml'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: "publish designsystem to Helsnorge-registry (master only)"
            inputs:
              command: publish
              workingDir: npm/designsystem/lib
              publishRegistry: useFeed
              publishFeed: "926a1f6a-72f8-4464-b9be-a7978dee78b0"
            continueOnError: true
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'),  eq(variables['Build.SourceBranch'], 'refs/heads/master'))

          - task: Npm@1
            displayName: "publish designsystem to NPM (master only)"
            inputs:
              command: publish
              workingDir: "npm/designsystem/lib_npm"
              publishEndpoint: "npmjs connection (mai 2022)"
            continueOnError: true
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'),  eq(variables['Build.SourceBranch'], 'refs/heads/master'))

          - powershell: |
              # Write your PowerShell commands here.
              Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - -'
              Write-Host ' reflect Azure Devops repo changes to GitHub repo'
              Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - - '
              $stageDir = '$(Build.SourcesDirectory)' | Split-Path
              $githubDir = $stageDir +"\"+"gitHub"
              $destination = $githubDir +"\"+"HN-Designsystem.git"
              #please provide your username
              $alias = "$(Github.Username)" + ':' + "$(Github.PAT)"
              #Please make sure, you remove https from azure-repo-clone-url
              $sourceURL = 'https://$(AzureDevOps.PAT)@dev.azure.com/nhnfelles/Helsenorge/_git/HN-Designsystem'
              #Please make sure, you remove https from github-repo-clone-url
              $destURL = 'https://' + $alias + '@github.com/helsenorge/designsystem.git'
              #Check if the parent directory exists and delete
              if((Test-Path -path $githubDir))
              {
                Remove-Item -Path $githubDir -Recurse -force
              }
              if(!(Test-Path -path $githubDir))
              {
                New-Item -ItemType directory -Path $githubDir
                Set-Location $githubDir
                git clone --mirror $sourceURL
              }
              else
              {
                Write-Host "The given folder path $githubDir already exists";
              }
              Set-Location $destination
              Write-Output '*****Git removing remote secondary****'
              git remote rm secondary
              Write-Output '*****Git remote add****'
              git remote add --mirror=fetch secondary $destURL
              Write-Output '*****Git fetch origin****'
              git fetch $sourceURL
              Write-Output '*****Git push secondary****'
              git push secondary -f --all
              Write-Output '**Azure Devops repo synced with Github repo**'
              Set-Location $stageDir
              if((Test-Path -path $githubDir))
              {
                Remove-Item -Path $githubDir -Recurse -force
              }
              displayName: 'Sync til GitHub repo'
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'),  eq(variables['Build.SourceBranch'], 'refs/heads/master'))
