resources:
  repositories:
    - repository: templates #internt navn på repo, brukes i referanser
      type: git #type repo (les mer i dokumentasjon)
      name: HN-AzureDevopsPipelines #Navn på repo som inneholder templates

trigger:
  branches:
    include:
      - master
      - feature/*
  tags:
    include:
      - "v*"

pool:
  name: Helsenorge_LinuxScaleSetAgents

variables:
  - name: node_version
    value: 16.x
  - name: project_name
    value: Designsystem.Packages.Designsystem.CI
  - name: working_directory
    value: .
  - name: sonarqube_endpoint
    value: "https://sonarqube.int-hn.nhn.no"
  - name: Github.Username
    value: "larskrj"

stages:
  # stage build, test and analyze
  - stage:
    displayName: Build, Test and Analyze
    condition: succeededOrFailed() #Vent på de foregående stegene, men kjør selv om de feiler
    jobs:
      - job:
        displayName: Build, Test and Analyze
        steps:
          # Prepare Sonarqube
          - task: SonarQubePrepare@4
            displayName: Sonarqube Prepare
            inputs:
              SonarQube: $(sonarqube_endpoint)
              scannerMode: "CLI"
              cliProjectKey: $(project_name)
              cliProjectName: $(project_name)
              configMode: manual

          # Set node version
          - task: UseNode@1
            displayName: "Use Node version"
            inputs:
              version: $(node_version)

          # npm tasks
          # autenticate
          - task: npmAuthenticate@0
            displayName: "npm Authenticate .npmrc"
            inputs:
              workingFile: npm/designsystem/.npmrc

          - task: Npm@1
            displayName: "npm i (install lerna)"
            inputs:
              command: install
              workingDir: $(working_directory)

          - task: Npm@1
            displayName: "npm bootstrap (ci)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run bootstrap:ci"

          # Lint commit message
          - bash: |
              PR_TITLE="$(curl --silent -u azdo:$SYSTEM_ACCESSTOKEN \
              $(System.CollectionUri)_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=5.1 \
              | jq -r .title)"
              echo "##vso[task.setvariable variable=Pr.Title]$PR_TITLE"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            displayName: Extract pull request title
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: prettier
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run format:ci"
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: test
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run test"

          - task: Npm@1
            displayName: build
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run build"

          - task: Npm@1
            displayName: "build (for npmjs publishing only)"
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: "run copy:libnpmjs"
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'beta')))

          # Run Code Analysis task
          - task: SonarQubeAnalyze@4
            displayName: Sonarqube Analyze

          # Test results
          - task: PublishTestResults@2
            displayName: "Publish Test Results $(project_directory)/test-report.xml"
            inputs:
              testResultsFiles: "$(project_directory)/test-report.xml"
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage from $(Build.SourcesDirectory)\$(project_directory)\coverage\cobertura-coverage.xml'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)\$(project_directory)\coverage\cobertura-coverage.xml'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          - task: Npm@1
            displayName: "publish designsystem to Helsnorge-registry (latest)"
            inputs:
              command: publish
              workingDir: npm/designsystem/lib
              publishRegistry: useFeed
              publishFeed: "926a1f6a-72f8-4464-b9be-a7978dee78b0"
            continueOnError: true
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'beta')))

          - task: Npm@1
            displayName: "publish designsystem to Helsnorge-registry (beta)"
            inputs:
              customCommand: "publish --tag=beta"
              workingDir: npm/designsystem/lib
            continueOnError: true
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], 'beta'))

          - task: Npm@1
            displayName: "publish designsystem to NPM (latest)"
            inputs:
              command: publish
              workingDir: "npm/designsystem/lib_npm"
              publishEndpoint: "npmjs connection (mai 2022)"
            continueOnError: true
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              contains(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'beta')))

          - task: Npm@1
            displayName: "build storybook"
            inputs:
              command: custom
              workingDir: npm/designsystem
              customCommand: "run build-storybook"
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/feature/next'))

          - task: Npm@1
            displayName: "deploy storybook (master)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run deploy:storybook"
            env:
              NETLIFY_AUTH_TOKEN: $(Netlify.Auth.Token)
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              eq(variables['Build.SourceBranch'], 'refs/heads/master'))

          - task: Npm@1
            displayName: "deploy storybook (next)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run deploy:storybook:next"
            env:
              NETLIFY_AUTH_TOKEN: $(Netlify.Auth.Token)
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              eq(variables['Build.SourceBranch'], 'refs/heads/feature/next'))

          - task: Npm@1
            displayName: "deploy documentation (master)"
            inputs:
              command: custom
              workingDir: $(working_directory)
              customCommand: "run deploy:documentation"
            env:
              NETLIFY_AUTH_TOKEN: $(Netlify.Auth.Token)
            condition:
              and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
              eq(variables['Build.SourceBranch'], 'refs/heads/master'))
